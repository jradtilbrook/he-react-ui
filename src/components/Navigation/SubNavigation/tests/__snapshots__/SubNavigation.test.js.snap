// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<withRouter(SubNavigation) /> rendered correctly with OnePracticeWithChildren fixture 1`] = `
<withRouter(SubNavigation)
  item={
    Object {
      "badge": "FREE",
      "items": Array [
        Object {
          "key": "MAIN",
          "label": "Main",
          "route": "/parent",
        },
        Object {
          "key": "SECONDARY",
          "label": "Secondary",
          "route": "/parent/secondary",
        },
      ],
      "key": "PARENT",
      "label": "Parent",
      "route": "/parent",
      "title": "Parent title",
    }
  }
  locations={
    Array [
      Object {
        "label": "Location A",
        "value": "Location A",
      },
      Object {
        "label": "Location B",
        "value": "Location B",
      },
    ]
  }
  logoutRoute="/logout"
>
  <Route
    render={[Function]}
  >
    <SubNavigation
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "mocked",
              "pathname": "/feedback",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "mocked",
            "pathname": "/feedback",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      item={
        Object {
          "badge": "FREE",
          "items": Array [
            Object {
              "key": "MAIN",
              "label": "Main",
              "route": "/parent",
            },
            Object {
              "key": "SECONDARY",
              "label": "Secondary",
              "route": "/parent/secondary",
            },
          ],
          "key": "PARENT",
          "label": "Parent",
          "route": "/parent",
          "title": "Parent title",
        }
      }
      loading={false}
      location={
        Object {
          "hash": "",
          "key": "mocked",
          "pathname": "/feedback",
          "search": "",
          "state": undefined,
        }
      }
      locations={
        Array [
          Object {
            "label": "Location A",
            "value": "Location A",
          },
          Object {
            "label": "Location B",
            "value": "Location B",
          },
        ]
      }
      logoutRoute="/logout"
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <div
        className="bar"
      >
        <div
          className="top"
        >
          <h2
            className="heading"
          >
            Parent title
          </h2>
          <span
            className="control selector"
          >
            <SingleSelect
              disabled={false}
              error=""
              fill={true}
              id="locationSelector"
              inline={false}
              name="location"
              onBeforeOpen={[Function]}
              onChange={[Function]}
              onClose={[Function]}
              options={
                Array [
                  Object {
                    "label": "Location A",
                    "value": "Location A",
                  },
                  Object {
                    "label": "Location B",
                    "value": "Location B",
                  },
                ]
              }
              value={null}
            >
              <div
                className="outer fill"
              >
                <div
                  className="relative"
                >
                  <div
                    className="container fill"
                  >
                    <Select
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      className="select"
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={true}
                      closeOnSelect={true}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      id="locationSelector"
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={Object {}}
                      isLoading={false}
                      joinValues={true}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      name="location"
                      noResultsText="No results found"
                      onBlurResetsInput={true}
                      onChange={[Function]}
                      onClose={[Function]}
                      onCloseResetsInput={true}
                      onOpen={[Function]}
                      onSelectResetsInput={true}
                      openOnClick={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Location A",
                            "value": "Location A",
                          },
                          Object {
                            "label": "Location B",
                            "value": "Location B",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      removeSelected={true}
                      required={false}
                      rtl={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      simpleValue={false}
                      tabSelectsValue={true}
                      trimFilter={true}
                      value={null}
                      valueComponent={[Function]}
                      valueKey="value"
                      valueRenderer={[Function]}
                    >
                      <div
                        className="Select select is-clearable is-searchable Select--single"
                      >
                        <input
                          disabled={false}
                          name="location"
                          type="hidden"
                          value=""
                        />
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-3--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <AutosizeInput
                              aria-activedescendant="react-select-3--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              className="Select-input"
                              id="locationSelector"
                              injectStyles={true}
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <input
                                  aria-activedescendant="react-select-3--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  id="locationSelector"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </AutosizeInput>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                    <DropDown
                      className="caret"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="caret"
                        fill="currentColor"
                        height={32}
                        viewBox="0 0 24 24"
                        width={32}
                      >
                        <path
                          d="M8.068 9h7.864a.5.5 0 0 1 .385.82l-3.933 4.72a.5.5 0 0 1-.768 0L7.683 9.82A.5.5 0 0 1 8.068 9z"
                        />
                      </svg>
                    </DropDown>
                  </div>
                </div>
              </div>
            </SingleSelect>
          </span>
          <span
            className="control logout"
          >
            <NavLink
              activeClassName="active"
              ariaCurrent="true"
              className="navLink"
              key="logout"
              title="Logout"
              to="/logout"
            >
              <Route
                path="/logout"
              >
                <Link
                  aria-current={false}
                  className="navLink"
                  replace={false}
                  title="Logout"
                  to="/logout"
                >
                  <a
                    aria-current={false}
                    className="navLink"
                    href="/logout"
                    onClick={[Function]}
                    title="Logout"
                  >
                    <Logout
                      className="icon"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="icon"
                        fill="currentColor"
                        height={32}
                        viewBox="0 1 16 16"
                        width={32}
                      >
                        <path
                          d="M7.5 1.666c-.823 0-1.5.677-1.5 1.5v3h1v-3c0-.281.219-.5.5-.5h7c.281 0 .5.219.5.5v12c0 .281-.219.5-.5.5h-7a.493.493 0 0 1-.5-.5v-3H6v3c0 .823.677 1.5 1.5 1.5h7c.823 0 1.5-.677 1.5-1.5v-12c0-.823-.677-1.5-1.5-1.5h-7zM3.146 5.813L-.207 9.165l3.353 3.354.708-.707-2.147-2.147H11.5v-1H1.707L3.854 6.52l-.708-.707z"
                        />
                      </svg>
                    </Logout>
                    Logout
                  </a>
                </Link>
              </Route>
            </NavLink>
          </span>
        </div>
        <div
          className="items"
        >
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="MAIN"
            title="Main"
            to="/parent"
          >
            <Route
              exact={true}
              path="/parent"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Main"
                to="/parent"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent"
                  onClick={[Function]}
                  title="Main"
                >
                  <span>
                    Main
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="SECONDARY"
            title="Secondary"
            to="/parent/secondary"
          >
            <Route
              exact={true}
              path="/parent/secondary"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Secondary"
                to="/parent/secondary"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent/secondary"
                  onClick={[Function]}
                  title="Secondary"
                >
                  <span>
                    Secondary
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
    </SubNavigation>
  </Route>
</withRouter(SubNavigation)>
`;

exports[`<withRouter(SubNavigation) /> rendered correctly with default fixture 1`] = `
<withRouter(SubNavigation)
  item={
    Object {
      "badge": "FREE",
      "items": Array [
        Object {
          "key": "MAIN",
          "label": "Main",
          "route": "/parent",
        },
        Object {
          "key": "SECONDARY",
          "label": "Secondary",
          "route": "/parent/secondary",
        },
      ],
      "key": "PARENT",
      "label": "Parent",
      "route": "/parent",
      "title": "Parent title",
    }
  }
  locations={
    Array [
      Object {
        "label": "Location A",
        "value": "Location A",
      },
      Object {
        "label": "Location B",
        "value": "Location B",
      },
    ]
  }
  logoutRoute="/logout"
>
  <Route
    render={[Function]}
  >
    <SubNavigation
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "mocked",
              "pathname": "/feedback",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "mocked",
            "pathname": "/feedback",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      item={
        Object {
          "badge": "FREE",
          "items": Array [
            Object {
              "key": "MAIN",
              "label": "Main",
              "route": "/parent",
            },
            Object {
              "key": "SECONDARY",
              "label": "Secondary",
              "route": "/parent/secondary",
            },
          ],
          "key": "PARENT",
          "label": "Parent",
          "route": "/parent",
          "title": "Parent title",
        }
      }
      loading={false}
      location={
        Object {
          "hash": "",
          "key": "mocked",
          "pathname": "/feedback",
          "search": "",
          "state": undefined,
        }
      }
      locations={
        Array [
          Object {
            "label": "Location A",
            "value": "Location A",
          },
          Object {
            "label": "Location B",
            "value": "Location B",
          },
        ]
      }
      logoutRoute="/logout"
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <div
        className="bar"
      >
        <div
          className="top"
        >
          <h2
            className="heading"
          >
            Parent title
          </h2>
          <span
            className="control selector"
          >
            <SingleSelect
              disabled={false}
              error=""
              fill={true}
              id="locationSelector"
              inline={false}
              name="location"
              onBeforeOpen={[Function]}
              onChange={[Function]}
              onClose={[Function]}
              options={
                Array [
                  Object {
                    "label": "Location A",
                    "value": "Location A",
                  },
                  Object {
                    "label": "Location B",
                    "value": "Location B",
                  },
                ]
              }
              value={null}
            >
              <div
                className="outer fill"
              >
                <div
                  className="relative"
                >
                  <div
                    className="container fill"
                  >
                    <Select
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      className="select"
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={true}
                      closeOnSelect={true}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      id="locationSelector"
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={Object {}}
                      isLoading={false}
                      joinValues={true}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      name="location"
                      noResultsText="No results found"
                      onBlurResetsInput={true}
                      onChange={[Function]}
                      onClose={[Function]}
                      onCloseResetsInput={true}
                      onOpen={[Function]}
                      onSelectResetsInput={true}
                      openOnClick={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Location A",
                            "value": "Location A",
                          },
                          Object {
                            "label": "Location B",
                            "value": "Location B",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      removeSelected={true}
                      required={false}
                      rtl={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      simpleValue={false}
                      tabSelectsValue={true}
                      trimFilter={true}
                      value={null}
                      valueComponent={[Function]}
                      valueKey="value"
                      valueRenderer={[Function]}
                    >
                      <div
                        className="Select select is-clearable is-searchable Select--single"
                      >
                        <input
                          disabled={false}
                          name="location"
                          type="hidden"
                          value=""
                        />
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-3--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <AutosizeInput
                              aria-activedescendant="react-select-3--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              className="Select-input"
                              id="locationSelector"
                              injectStyles={true}
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <input
                                  aria-activedescendant="react-select-3--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  id="locationSelector"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </AutosizeInput>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                    <DropDown
                      className="caret"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="caret"
                        fill="currentColor"
                        height={32}
                        viewBox="0 0 24 24"
                        width={32}
                      >
                        <path
                          d="M8.068 9h7.864a.5.5 0 0 1 .385.82l-3.933 4.72a.5.5 0 0 1-.768 0L7.683 9.82A.5.5 0 0 1 8.068 9z"
                        />
                      </svg>
                    </DropDown>
                  </div>
                </div>
              </div>
            </SingleSelect>
          </span>
          <span
            className="control logout"
          >
            <NavLink
              activeClassName="active"
              ariaCurrent="true"
              className="navLink"
              key="logout"
              title="Logout"
              to="/logout"
            >
              <Route
                path="/logout"
              >
                <Link
                  aria-current={false}
                  className="navLink"
                  replace={false}
                  title="Logout"
                  to="/logout"
                >
                  <a
                    aria-current={false}
                    className="navLink"
                    href="/logout"
                    onClick={[Function]}
                    title="Logout"
                  >
                    <Logout
                      className="icon"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="icon"
                        fill="currentColor"
                        height={32}
                        viewBox="0 1 16 16"
                        width={32}
                      >
                        <path
                          d="M7.5 1.666c-.823 0-1.5.677-1.5 1.5v3h1v-3c0-.281.219-.5.5-.5h7c.281 0 .5.219.5.5v12c0 .281-.219.5-.5.5h-7a.493.493 0 0 1-.5-.5v-3H6v3c0 .823.677 1.5 1.5 1.5h7c.823 0 1.5-.677 1.5-1.5v-12c0-.823-.677-1.5-1.5-1.5h-7zM3.146 5.813L-.207 9.165l3.353 3.354.708-.707-2.147-2.147H11.5v-1H1.707L3.854 6.52l-.708-.707z"
                        />
                      </svg>
                    </Logout>
                    Logout
                  </a>
                </Link>
              </Route>
            </NavLink>
          </span>
        </div>
        <div
          className="items"
        >
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="MAIN"
            title="Main"
            to="/parent"
          >
            <Route
              exact={true}
              path="/parent"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Main"
                to="/parent"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent"
                  onClick={[Function]}
                  title="Main"
                >
                  <span>
                    Main
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="SECONDARY"
            title="Secondary"
            to="/parent/secondary"
          >
            <Route
              exact={true}
              path="/parent/secondary"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Secondary"
                to="/parent/secondary"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent/secondary"
                  onClick={[Function]}
                  title="Secondary"
                >
                  <span>
                    Secondary
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
    </SubNavigation>
  </Route>
</withRouter(SubNavigation)>
`;

exports[`<withRouter(SubNavigation) /> rendered correctly with loading fixture 1`] = `
<withRouter(SubNavigation)
  item={
    Object {
      "badge": "FREE",
      "items": Array [
        Object {
          "key": "MAIN",
          "label": "Main",
          "route": "/parent",
        },
        Object {
          "key": "SECONDARY",
          "label": "Secondary",
          "route": "/parent/secondary",
        },
      ],
      "key": "PARENT",
      "label": "Parent",
      "route": "/parent",
      "title": "Parent title",
    }
  }
  locations={
    Array [
      Object {
        "label": "Location A",
        "value": "Location A",
      },
      Object {
        "label": "Location B",
        "value": "Location B",
      },
    ]
  }
  logoutRoute="/logout"
>
  <Route
    render={[Function]}
  >
    <SubNavigation
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "mocked",
              "pathname": "/feedback",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "mocked",
            "pathname": "/feedback",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      item={
        Object {
          "badge": "FREE",
          "items": Array [
            Object {
              "key": "MAIN",
              "label": "Main",
              "route": "/parent",
            },
            Object {
              "key": "SECONDARY",
              "label": "Secondary",
              "route": "/parent/secondary",
            },
          ],
          "key": "PARENT",
          "label": "Parent",
          "route": "/parent",
          "title": "Parent title",
        }
      }
      loading={false}
      location={
        Object {
          "hash": "",
          "key": "mocked",
          "pathname": "/feedback",
          "search": "",
          "state": undefined,
        }
      }
      locations={
        Array [
          Object {
            "label": "Location A",
            "value": "Location A",
          },
          Object {
            "label": "Location B",
            "value": "Location B",
          },
        ]
      }
      logoutRoute="/logout"
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <div
        className="bar"
      >
        <div
          className="top"
        >
          <h2
            className="heading"
          >
            Parent title
          </h2>
          <span
            className="control selector"
          >
            <SingleSelect
              disabled={false}
              error=""
              fill={true}
              id="locationSelector"
              inline={false}
              name="location"
              onBeforeOpen={[Function]}
              onChange={[Function]}
              onClose={[Function]}
              options={
                Array [
                  Object {
                    "label": "Location A",
                    "value": "Location A",
                  },
                  Object {
                    "label": "Location B",
                    "value": "Location B",
                  },
                ]
              }
              value={null}
            >
              <div
                className="outer fill"
              >
                <div
                  className="relative"
                >
                  <div
                    className="container fill"
                  >
                    <Select
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      className="select"
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={true}
                      closeOnSelect={true}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      id="locationSelector"
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={Object {}}
                      isLoading={false}
                      joinValues={true}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      name="location"
                      noResultsText="No results found"
                      onBlurResetsInput={true}
                      onChange={[Function]}
                      onClose={[Function]}
                      onCloseResetsInput={true}
                      onOpen={[Function]}
                      onSelectResetsInput={true}
                      openOnClick={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Location A",
                            "value": "Location A",
                          },
                          Object {
                            "label": "Location B",
                            "value": "Location B",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      removeSelected={true}
                      required={false}
                      rtl={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      simpleValue={false}
                      tabSelectsValue={true}
                      trimFilter={true}
                      value={null}
                      valueComponent={[Function]}
                      valueKey="value"
                      valueRenderer={[Function]}
                    >
                      <div
                        className="Select select is-clearable is-searchable Select--single"
                      >
                        <input
                          disabled={false}
                          name="location"
                          type="hidden"
                          value=""
                        />
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-3--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <AutosizeInput
                              aria-activedescendant="react-select-3--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              className="Select-input"
                              id="locationSelector"
                              injectStyles={true}
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <input
                                  aria-activedescendant="react-select-3--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  id="locationSelector"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </AutosizeInput>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                    <DropDown
                      className="caret"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="caret"
                        fill="currentColor"
                        height={32}
                        viewBox="0 0 24 24"
                        width={32}
                      >
                        <path
                          d="M8.068 9h7.864a.5.5 0 0 1 .385.82l-3.933 4.72a.5.5 0 0 1-.768 0L7.683 9.82A.5.5 0 0 1 8.068 9z"
                        />
                      </svg>
                    </DropDown>
                  </div>
                </div>
              </div>
            </SingleSelect>
          </span>
          <span
            className="control logout"
          >
            <NavLink
              activeClassName="active"
              ariaCurrent="true"
              className="navLink"
              key="logout"
              title="Logout"
              to="/logout"
            >
              <Route
                path="/logout"
              >
                <Link
                  aria-current={false}
                  className="navLink"
                  replace={false}
                  title="Logout"
                  to="/logout"
                >
                  <a
                    aria-current={false}
                    className="navLink"
                    href="/logout"
                    onClick={[Function]}
                    title="Logout"
                  >
                    <Logout
                      className="icon"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="icon"
                        fill="currentColor"
                        height={32}
                        viewBox="0 1 16 16"
                        width={32}
                      >
                        <path
                          d="M7.5 1.666c-.823 0-1.5.677-1.5 1.5v3h1v-3c0-.281.219-.5.5-.5h7c.281 0 .5.219.5.5v12c0 .281-.219.5-.5.5h-7a.493.493 0 0 1-.5-.5v-3H6v3c0 .823.677 1.5 1.5 1.5h7c.823 0 1.5-.677 1.5-1.5v-12c0-.823-.677-1.5-1.5-1.5h-7zM3.146 5.813L-.207 9.165l3.353 3.354.708-.707-2.147-2.147H11.5v-1H1.707L3.854 6.52l-.708-.707z"
                        />
                      </svg>
                    </Logout>
                    Logout
                  </a>
                </Link>
              </Route>
            </NavLink>
          </span>
        </div>
        <div
          className="items"
        >
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="MAIN"
            title="Main"
            to="/parent"
          >
            <Route
              exact={true}
              path="/parent"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Main"
                to="/parent"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent"
                  onClick={[Function]}
                  title="Main"
                >
                  <span>
                    Main
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="SECONDARY"
            title="Secondary"
            to="/parent/secondary"
          >
            <Route
              exact={true}
              path="/parent/secondary"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Secondary"
                to="/parent/secondary"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent/secondary"
                  onClick={[Function]}
                  title="Secondary"
                >
                  <span>
                    Secondary
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
    </SubNavigation>
  </Route>
</withRouter(SubNavigation)>
`;

exports[`<withRouter(SubNavigation) /> rendered correctly with multiPracticeNoChildren fixture 1`] = `
<withRouter(SubNavigation)
  item={
    Object {
      "badge": "FREE",
      "items": Array [
        Object {
          "key": "MAIN",
          "label": "Main",
          "route": "/parent",
        },
        Object {
          "key": "SECONDARY",
          "label": "Secondary",
          "route": "/parent/secondary",
        },
      ],
      "key": "PARENT",
      "label": "Parent",
      "route": "/parent",
      "title": "Parent title",
    }
  }
  locations={
    Array [
      Object {
        "label": "Location A",
        "value": "Location A",
      },
      Object {
        "label": "Location B",
        "value": "Location B",
      },
    ]
  }
  logoutRoute="/logout"
>
  <Route
    render={[Function]}
  >
    <SubNavigation
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "mocked",
              "pathname": "/feedback",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "mocked",
            "pathname": "/feedback",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      item={
        Object {
          "badge": "FREE",
          "items": Array [
            Object {
              "key": "MAIN",
              "label": "Main",
              "route": "/parent",
            },
            Object {
              "key": "SECONDARY",
              "label": "Secondary",
              "route": "/parent/secondary",
            },
          ],
          "key": "PARENT",
          "label": "Parent",
          "route": "/parent",
          "title": "Parent title",
        }
      }
      loading={false}
      location={
        Object {
          "hash": "",
          "key": "mocked",
          "pathname": "/feedback",
          "search": "",
          "state": undefined,
        }
      }
      locations={
        Array [
          Object {
            "label": "Location A",
            "value": "Location A",
          },
          Object {
            "label": "Location B",
            "value": "Location B",
          },
        ]
      }
      logoutRoute="/logout"
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <div
        className="bar"
      >
        <div
          className="top"
        >
          <h2
            className="heading"
          >
            Parent title
          </h2>
          <span
            className="control selector"
          >
            <SingleSelect
              disabled={false}
              error=""
              fill={true}
              id="locationSelector"
              inline={false}
              name="location"
              onBeforeOpen={[Function]}
              onChange={[Function]}
              onClose={[Function]}
              options={
                Array [
                  Object {
                    "label": "Location A",
                    "value": "Location A",
                  },
                  Object {
                    "label": "Location B",
                    "value": "Location B",
                  },
                ]
              }
              value={null}
            >
              <div
                className="outer fill"
              >
                <div
                  className="relative"
                >
                  <div
                    className="container fill"
                  >
                    <Select
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      className="select"
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={true}
                      closeOnSelect={true}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      id="locationSelector"
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={Object {}}
                      isLoading={false}
                      joinValues={true}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      name="location"
                      noResultsText="No results found"
                      onBlurResetsInput={true}
                      onChange={[Function]}
                      onClose={[Function]}
                      onCloseResetsInput={true}
                      onOpen={[Function]}
                      onSelectResetsInput={true}
                      openOnClick={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Location A",
                            "value": "Location A",
                          },
                          Object {
                            "label": "Location B",
                            "value": "Location B",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      removeSelected={true}
                      required={false}
                      rtl={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      simpleValue={false}
                      tabSelectsValue={true}
                      trimFilter={true}
                      value={null}
                      valueComponent={[Function]}
                      valueKey="value"
                      valueRenderer={[Function]}
                    >
                      <div
                        className="Select select is-clearable is-searchable Select--single"
                      >
                        <input
                          disabled={false}
                          name="location"
                          type="hidden"
                          value=""
                        />
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-3--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <AutosizeInput
                              aria-activedescendant="react-select-3--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              className="Select-input"
                              id="locationSelector"
                              injectStyles={true}
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <input
                                  aria-activedescendant="react-select-3--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  id="locationSelector"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </AutosizeInput>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                    <DropDown
                      className="caret"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="caret"
                        fill="currentColor"
                        height={32}
                        viewBox="0 0 24 24"
                        width={32}
                      >
                        <path
                          d="M8.068 9h7.864a.5.5 0 0 1 .385.82l-3.933 4.72a.5.5 0 0 1-.768 0L7.683 9.82A.5.5 0 0 1 8.068 9z"
                        />
                      </svg>
                    </DropDown>
                  </div>
                </div>
              </div>
            </SingleSelect>
          </span>
          <span
            className="control logout"
          >
            <NavLink
              activeClassName="active"
              ariaCurrent="true"
              className="navLink"
              key="logout"
              title="Logout"
              to="/logout"
            >
              <Route
                path="/logout"
              >
                <Link
                  aria-current={false}
                  className="navLink"
                  replace={false}
                  title="Logout"
                  to="/logout"
                >
                  <a
                    aria-current={false}
                    className="navLink"
                    href="/logout"
                    onClick={[Function]}
                    title="Logout"
                  >
                    <Logout
                      className="icon"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="icon"
                        fill="currentColor"
                        height={32}
                        viewBox="0 1 16 16"
                        width={32}
                      >
                        <path
                          d="M7.5 1.666c-.823 0-1.5.677-1.5 1.5v3h1v-3c0-.281.219-.5.5-.5h7c.281 0 .5.219.5.5v12c0 .281-.219.5-.5.5h-7a.493.493 0 0 1-.5-.5v-3H6v3c0 .823.677 1.5 1.5 1.5h7c.823 0 1.5-.677 1.5-1.5v-12c0-.823-.677-1.5-1.5-1.5h-7zM3.146 5.813L-.207 9.165l3.353 3.354.708-.707-2.147-2.147H11.5v-1H1.707L3.854 6.52l-.708-.707z"
                        />
                      </svg>
                    </Logout>
                    Logout
                  </a>
                </Link>
              </Route>
            </NavLink>
          </span>
        </div>
        <div
          className="items"
        >
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="MAIN"
            title="Main"
            to="/parent"
          >
            <Route
              exact={true}
              path="/parent"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Main"
                to="/parent"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent"
                  onClick={[Function]}
                  title="Main"
                >
                  <span>
                    Main
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="SECONDARY"
            title="Secondary"
            to="/parent/secondary"
          >
            <Route
              exact={true}
              path="/parent/secondary"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Secondary"
                to="/parent/secondary"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent/secondary"
                  onClick={[Function]}
                  title="Secondary"
                >
                  <span>
                    Secondary
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
    </SubNavigation>
  </Route>
</withRouter(SubNavigation)>
`;

exports[`<withRouter(SubNavigation) /> rendered correctly with noChildren fixture 1`] = `
<withRouter(SubNavigation)
  item={
    Object {
      "badge": "FREE",
      "items": Array [
        Object {
          "key": "MAIN",
          "label": "Main",
          "route": "/parent",
        },
        Object {
          "key": "SECONDARY",
          "label": "Secondary",
          "route": "/parent/secondary",
        },
      ],
      "key": "PARENT",
      "label": "Parent",
      "route": "/parent",
      "title": "Parent title",
    }
  }
  locations={
    Array [
      Object {
        "label": "Location A",
        "value": "Location A",
      },
      Object {
        "label": "Location B",
        "value": "Location B",
      },
    ]
  }
  logoutRoute="/logout"
>
  <Route
    render={[Function]}
  >
    <SubNavigation
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "mocked",
              "pathname": "/feedback",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "mocked",
            "pathname": "/feedback",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      item={
        Object {
          "badge": "FREE",
          "items": Array [
            Object {
              "key": "MAIN",
              "label": "Main",
              "route": "/parent",
            },
            Object {
              "key": "SECONDARY",
              "label": "Secondary",
              "route": "/parent/secondary",
            },
          ],
          "key": "PARENT",
          "label": "Parent",
          "route": "/parent",
          "title": "Parent title",
        }
      }
      loading={false}
      location={
        Object {
          "hash": "",
          "key": "mocked",
          "pathname": "/feedback",
          "search": "",
          "state": undefined,
        }
      }
      locations={
        Array [
          Object {
            "label": "Location A",
            "value": "Location A",
          },
          Object {
            "label": "Location B",
            "value": "Location B",
          },
        ]
      }
      logoutRoute="/logout"
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <div
        className="bar"
      >
        <div
          className="top"
        >
          <h2
            className="heading"
          >
            Parent title
          </h2>
          <span
            className="control selector"
          >
            <SingleSelect
              disabled={false}
              error=""
              fill={true}
              id="locationSelector"
              inline={false}
              name="location"
              onBeforeOpen={[Function]}
              onChange={[Function]}
              onClose={[Function]}
              options={
                Array [
                  Object {
                    "label": "Location A",
                    "value": "Location A",
                  },
                  Object {
                    "label": "Location B",
                    "value": "Location B",
                  },
                ]
              }
              value={null}
            >
              <div
                className="outer fill"
              >
                <div
                  className="relative"
                >
                  <div
                    className="container fill"
                  >
                    <Select
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      className="select"
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={true}
                      closeOnSelect={true}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      id="locationSelector"
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={Object {}}
                      isLoading={false}
                      joinValues={true}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      name="location"
                      noResultsText="No results found"
                      onBlurResetsInput={true}
                      onChange={[Function]}
                      onClose={[Function]}
                      onCloseResetsInput={true}
                      onOpen={[Function]}
                      onSelectResetsInput={true}
                      openOnClick={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Location A",
                            "value": "Location A",
                          },
                          Object {
                            "label": "Location B",
                            "value": "Location B",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      removeSelected={true}
                      required={false}
                      rtl={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      simpleValue={false}
                      tabSelectsValue={true}
                      trimFilter={true}
                      value={null}
                      valueComponent={[Function]}
                      valueKey="value"
                      valueRenderer={[Function]}
                    >
                      <div
                        className="Select select is-clearable is-searchable Select--single"
                      >
                        <input
                          disabled={false}
                          name="location"
                          type="hidden"
                          value=""
                        />
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-3--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <AutosizeInput
                              aria-activedescendant="react-select-3--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              className="Select-input"
                              id="locationSelector"
                              injectStyles={true}
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <input
                                  aria-activedescendant="react-select-3--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  id="locationSelector"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </AutosizeInput>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                    <DropDown
                      className="caret"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="caret"
                        fill="currentColor"
                        height={32}
                        viewBox="0 0 24 24"
                        width={32}
                      >
                        <path
                          d="M8.068 9h7.864a.5.5 0 0 1 .385.82l-3.933 4.72a.5.5 0 0 1-.768 0L7.683 9.82A.5.5 0 0 1 8.068 9z"
                        />
                      </svg>
                    </DropDown>
                  </div>
                </div>
              </div>
            </SingleSelect>
          </span>
          <span
            className="control logout"
          >
            <NavLink
              activeClassName="active"
              ariaCurrent="true"
              className="navLink"
              key="logout"
              title="Logout"
              to="/logout"
            >
              <Route
                path="/logout"
              >
                <Link
                  aria-current={false}
                  className="navLink"
                  replace={false}
                  title="Logout"
                  to="/logout"
                >
                  <a
                    aria-current={false}
                    className="navLink"
                    href="/logout"
                    onClick={[Function]}
                    title="Logout"
                  >
                    <Logout
                      className="icon"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="icon"
                        fill="currentColor"
                        height={32}
                        viewBox="0 1 16 16"
                        width={32}
                      >
                        <path
                          d="M7.5 1.666c-.823 0-1.5.677-1.5 1.5v3h1v-3c0-.281.219-.5.5-.5h7c.281 0 .5.219.5.5v12c0 .281-.219.5-.5.5h-7a.493.493 0 0 1-.5-.5v-3H6v3c0 .823.677 1.5 1.5 1.5h7c.823 0 1.5-.677 1.5-1.5v-12c0-.823-.677-1.5-1.5-1.5h-7zM3.146 5.813L-.207 9.165l3.353 3.354.708-.707-2.147-2.147H11.5v-1H1.707L3.854 6.52l-.708-.707z"
                        />
                      </svg>
                    </Logout>
                    Logout
                  </a>
                </Link>
              </Route>
            </NavLink>
          </span>
        </div>
        <div
          className="items"
        >
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="MAIN"
            title="Main"
            to="/parent"
          >
            <Route
              exact={true}
              path="/parent"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Main"
                to="/parent"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent"
                  onClick={[Function]}
                  title="Main"
                >
                  <span>
                    Main
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="SECONDARY"
            title="Secondary"
            to="/parent/secondary"
          >
            <Route
              exact={true}
              path="/parent/secondary"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Secondary"
                to="/parent/secondary"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent/secondary"
                  onClick={[Function]}
                  title="Secondary"
                >
                  <span>
                    Secondary
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
    </SubNavigation>
  </Route>
</withRouter(SubNavigation)>
`;

exports[`<withRouter(SubNavigation) /> rendered correctly with noItem fixture 1`] = `
<withRouter(SubNavigation)
  item={
    Object {
      "badge": "FREE",
      "items": Array [
        Object {
          "key": "MAIN",
          "label": "Main",
          "route": "/parent",
        },
        Object {
          "key": "SECONDARY",
          "label": "Secondary",
          "route": "/parent/secondary",
        },
      ],
      "key": "PARENT",
      "label": "Parent",
      "route": "/parent",
      "title": "Parent title",
    }
  }
  locations={
    Array [
      Object {
        "label": "Location A",
        "value": "Location A",
      },
      Object {
        "label": "Location B",
        "value": "Location B",
      },
    ]
  }
  logoutRoute="/logout"
>
  <Route
    render={[Function]}
  >
    <SubNavigation
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "mocked",
              "pathname": "/feedback",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "mocked",
            "pathname": "/feedback",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      item={
        Object {
          "badge": "FREE",
          "items": Array [
            Object {
              "key": "MAIN",
              "label": "Main",
              "route": "/parent",
            },
            Object {
              "key": "SECONDARY",
              "label": "Secondary",
              "route": "/parent/secondary",
            },
          ],
          "key": "PARENT",
          "label": "Parent",
          "route": "/parent",
          "title": "Parent title",
        }
      }
      loading={false}
      location={
        Object {
          "hash": "",
          "key": "mocked",
          "pathname": "/feedback",
          "search": "",
          "state": undefined,
        }
      }
      locations={
        Array [
          Object {
            "label": "Location A",
            "value": "Location A",
          },
          Object {
            "label": "Location B",
            "value": "Location B",
          },
        ]
      }
      logoutRoute="/logout"
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <div
        className="bar"
      >
        <div
          className="top"
        >
          <h2
            className="heading"
          >
            Parent title
          </h2>
          <span
            className="control selector"
          >
            <SingleSelect
              disabled={false}
              error=""
              fill={true}
              id="locationSelector"
              inline={false}
              name="location"
              onBeforeOpen={[Function]}
              onChange={[Function]}
              onClose={[Function]}
              options={
                Array [
                  Object {
                    "label": "Location A",
                    "value": "Location A",
                  },
                  Object {
                    "label": "Location B",
                    "value": "Location B",
                  },
                ]
              }
              value={null}
            >
              <div
                className="outer fill"
              >
                <div
                  className="relative"
                >
                  <div
                    className="container fill"
                  >
                    <Select
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      className="select"
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={true}
                      closeOnSelect={true}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      id="locationSelector"
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={Object {}}
                      isLoading={false}
                      joinValues={true}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      name="location"
                      noResultsText="No results found"
                      onBlurResetsInput={true}
                      onChange={[Function]}
                      onClose={[Function]}
                      onCloseResetsInput={true}
                      onOpen={[Function]}
                      onSelectResetsInput={true}
                      openOnClick={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Location A",
                            "value": "Location A",
                          },
                          Object {
                            "label": "Location B",
                            "value": "Location B",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      removeSelected={true}
                      required={false}
                      rtl={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      simpleValue={false}
                      tabSelectsValue={true}
                      trimFilter={true}
                      value={null}
                      valueComponent={[Function]}
                      valueKey="value"
                      valueRenderer={[Function]}
                    >
                      <div
                        className="Select select is-clearable is-searchable Select--single"
                      >
                        <input
                          disabled={false}
                          name="location"
                          type="hidden"
                          value=""
                        />
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-3--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <AutosizeInput
                              aria-activedescendant="react-select-3--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              className="Select-input"
                              id="locationSelector"
                              injectStyles={true}
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <input
                                  aria-activedescendant="react-select-3--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  id="locationSelector"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </AutosizeInput>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                    <DropDown
                      className="caret"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="caret"
                        fill="currentColor"
                        height={32}
                        viewBox="0 0 24 24"
                        width={32}
                      >
                        <path
                          d="M8.068 9h7.864a.5.5 0 0 1 .385.82l-3.933 4.72a.5.5 0 0 1-.768 0L7.683 9.82A.5.5 0 0 1 8.068 9z"
                        />
                      </svg>
                    </DropDown>
                  </div>
                </div>
              </div>
            </SingleSelect>
          </span>
          <span
            className="control logout"
          >
            <NavLink
              activeClassName="active"
              ariaCurrent="true"
              className="navLink"
              key="logout"
              title="Logout"
              to="/logout"
            >
              <Route
                path="/logout"
              >
                <Link
                  aria-current={false}
                  className="navLink"
                  replace={false}
                  title="Logout"
                  to="/logout"
                >
                  <a
                    aria-current={false}
                    className="navLink"
                    href="/logout"
                    onClick={[Function]}
                    title="Logout"
                  >
                    <Logout
                      className="icon"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="icon"
                        fill="currentColor"
                        height={32}
                        viewBox="0 1 16 16"
                        width={32}
                      >
                        <path
                          d="M7.5 1.666c-.823 0-1.5.677-1.5 1.5v3h1v-3c0-.281.219-.5.5-.5h7c.281 0 .5.219.5.5v12c0 .281-.219.5-.5.5h-7a.493.493 0 0 1-.5-.5v-3H6v3c0 .823.677 1.5 1.5 1.5h7c.823 0 1.5-.677 1.5-1.5v-12c0-.823-.677-1.5-1.5-1.5h-7zM3.146 5.813L-.207 9.165l3.353 3.354.708-.707-2.147-2.147H11.5v-1H1.707L3.854 6.52l-.708-.707z"
                        />
                      </svg>
                    </Logout>
                    Logout
                  </a>
                </Link>
              </Route>
            </NavLink>
          </span>
        </div>
        <div
          className="items"
        >
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="MAIN"
            title="Main"
            to="/parent"
          >
            <Route
              exact={true}
              path="/parent"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Main"
                to="/parent"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent"
                  onClick={[Function]}
                  title="Main"
                >
                  <span>
                    Main
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="SECONDARY"
            title="Secondary"
            to="/parent/secondary"
          >
            <Route
              exact={true}
              path="/parent/secondary"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Secondary"
                to="/parent/secondary"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent/secondary"
                  onClick={[Function]}
                  title="Secondary"
                >
                  <span>
                    Secondary
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
    </SubNavigation>
  </Route>
</withRouter(SubNavigation)>
`;

exports[`<withRouter(SubNavigation) /> rendered correctly with onePractice fixture 1`] = `
<withRouter(SubNavigation)
  item={
    Object {
      "badge": "FREE",
      "items": Array [
        Object {
          "key": "MAIN",
          "label": "Main",
          "route": "/parent",
        },
        Object {
          "key": "SECONDARY",
          "label": "Secondary",
          "route": "/parent/secondary",
        },
      ],
      "key": "PARENT",
      "label": "Parent",
      "route": "/parent",
      "title": "Parent title",
    }
  }
  locations={
    Array [
      Object {
        "label": "Location A",
        "value": "Location A",
      },
      Object {
        "label": "Location B",
        "value": "Location B",
      },
    ]
  }
  logoutRoute="/logout"
>
  <Route
    render={[Function]}
  >
    <SubNavigation
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "mocked",
              "pathname": "/feedback",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "mocked",
            "pathname": "/feedback",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
      item={
        Object {
          "badge": "FREE",
          "items": Array [
            Object {
              "key": "MAIN",
              "label": "Main",
              "route": "/parent",
            },
            Object {
              "key": "SECONDARY",
              "label": "Secondary",
              "route": "/parent/secondary",
            },
          ],
          "key": "PARENT",
          "label": "Parent",
          "route": "/parent",
          "title": "Parent title",
        }
      }
      loading={false}
      location={
        Object {
          "hash": "",
          "key": "mocked",
          "pathname": "/feedback",
          "search": "",
          "state": undefined,
        }
      }
      locations={
        Array [
          Object {
            "label": "Location A",
            "value": "Location A",
          },
          Object {
            "label": "Location B",
            "value": "Location B",
          },
        ]
      }
      logoutRoute="/logout"
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/",
          "url": "/",
        }
      }
    >
      <div
        className="bar"
      >
        <div
          className="top"
        >
          <h2
            className="heading"
          >
            Parent title
          </h2>
          <span
            className="control selector"
          >
            <SingleSelect
              disabled={false}
              error=""
              fill={true}
              id="locationSelector"
              inline={false}
              name="location"
              onBeforeOpen={[Function]}
              onChange={[Function]}
              onClose={[Function]}
              options={
                Array [
                  Object {
                    "label": "Location A",
                    "value": "Location A",
                  },
                  Object {
                    "label": "Location B",
                    "value": "Location B",
                  },
                ]
              }
              value={null}
            >
              <div
                className="outer fill"
              >
                <div
                  className="relative"
                >
                  <div
                    className="container fill"
                  >
                    <Select
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      className="select"
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={true}
                      closeOnSelect={true}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      id="locationSelector"
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={Object {}}
                      isLoading={false}
                      joinValues={true}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      name="location"
                      noResultsText="No results found"
                      onBlurResetsInput={true}
                      onChange={[Function]}
                      onClose={[Function]}
                      onCloseResetsInput={true}
                      onOpen={[Function]}
                      onSelectResetsInput={true}
                      openOnClick={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Location A",
                            "value": "Location A",
                          },
                          Object {
                            "label": "Location B",
                            "value": "Location B",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      removeSelected={true}
                      required={false}
                      rtl={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      simpleValue={false}
                      tabSelectsValue={true}
                      trimFilter={true}
                      value={null}
                      valueComponent={[Function]}
                      valueKey="value"
                      valueRenderer={[Function]}
                    >
                      <div
                        className="Select select is-clearable is-searchable Select--single"
                      >
                        <input
                          disabled={false}
                          name="location"
                          type="hidden"
                          value=""
                        />
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-3--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <AutosizeInput
                              aria-activedescendant="react-select-3--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              className="Select-input"
                              id="locationSelector"
                              injectStyles={true}
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <input
                                  aria-activedescendant="react-select-3--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  id="locationSelector"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </AutosizeInput>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                    <DropDown
                      className="caret"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="caret"
                        fill="currentColor"
                        height={32}
                        viewBox="0 0 24 24"
                        width={32}
                      >
                        <path
                          d="M8.068 9h7.864a.5.5 0 0 1 .385.82l-3.933 4.72a.5.5 0 0 1-.768 0L7.683 9.82A.5.5 0 0 1 8.068 9z"
                        />
                      </svg>
                    </DropDown>
                  </div>
                </div>
              </div>
            </SingleSelect>
          </span>
          <span
            className="control logout"
          >
            <NavLink
              activeClassName="active"
              ariaCurrent="true"
              className="navLink"
              key="logout"
              title="Logout"
              to="/logout"
            >
              <Route
                path="/logout"
              >
                <Link
                  aria-current={false}
                  className="navLink"
                  replace={false}
                  title="Logout"
                  to="/logout"
                >
                  <a
                    aria-current={false}
                    className="navLink"
                    href="/logout"
                    onClick={[Function]}
                    title="Logout"
                  >
                    <Logout
                      className="icon"
                      fill="currentColor"
                      height={32}
                      width={32}
                    >
                      <svg
                        className="icon"
                        fill="currentColor"
                        height={32}
                        viewBox="0 1 16 16"
                        width={32}
                      >
                        <path
                          d="M7.5 1.666c-.823 0-1.5.677-1.5 1.5v3h1v-3c0-.281.219-.5.5-.5h7c.281 0 .5.219.5.5v12c0 .281-.219.5-.5.5h-7a.493.493 0 0 1-.5-.5v-3H6v3c0 .823.677 1.5 1.5 1.5h7c.823 0 1.5-.677 1.5-1.5v-12c0-.823-.677-1.5-1.5-1.5h-7zM3.146 5.813L-.207 9.165l3.353 3.354.708-.707-2.147-2.147H11.5v-1H1.707L3.854 6.52l-.708-.707z"
                        />
                      </svg>
                    </Logout>
                    Logout
                  </a>
                </Link>
              </Route>
            </NavLink>
          </span>
        </div>
        <div
          className="items"
        >
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="MAIN"
            title="Main"
            to="/parent"
          >
            <Route
              exact={true}
              path="/parent"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Main"
                to="/parent"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent"
                  onClick={[Function]}
                  title="Main"
                >
                  <span>
                    Main
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            className="item"
            exact={true}
            key="SECONDARY"
            title="Secondary"
            to="/parent/secondary"
          >
            <Route
              exact={true}
              path="/parent/secondary"
            >
              <Link
                aria-current={false}
                className="item"
                replace={false}
                title="Secondary"
                to="/parent/secondary"
              >
                <a
                  aria-current={false}
                  className="item"
                  href="/parent/secondary"
                  onClick={[Function]}
                  title="Secondary"
                >
                  <span>
                    Secondary
                  </span>
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
    </SubNavigation>
  </Route>
</withRouter(SubNavigation)>
`;
